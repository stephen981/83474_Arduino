
C:\Users\USER\AppData\Local\Temp\arduino\sketches\E08E2A74BC89D8DE440225E7194C679F\Chew_83474.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__ctors_end>
   4:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   8:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
   c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  10:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  14:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  18:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  1c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  20:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  24:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  28:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  2c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  30:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  34:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  38:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  3c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  40:	0c 94 32 01 	jmp	0x264	; 0x264 <__vector_16>
  44:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  48:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  4c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  50:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  54:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  58:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  5c:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  60:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>
  64:	0c 94 6e 00 	jmp	0xdc	; 0xdc <__bad_interrupt>

00000068 <__trampolines_end>:
  68:	00 00       	nop
  6a:	00 08       	sbc	r0, r0
  6c:	00 02       	muls	r16, r16
  6e:	01 00       	.word	0x0001	; ????
  70:	00 03       	mulsu	r16, r16
  72:	04 07       	cpc	r16, r20
	...

0000007c <port_to_output_PGM>:
  7c:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000086 <port_to_mode_PGM>:
  86:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000090 <digital_pin_to_port_PGM>:
  90:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  a0:	03 03 03 03                                         ....

000000a4 <digital_pin_to_bit_mask_PGM>:
  a4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  b4:	04 08 10 20                                         ... 

000000b8 <__ctors_end>:
  b8:	11 24       	eor	r1, r1
  ba:	1f be       	out	0x3f, r1	; 63
  bc:	cf ef       	ldi	r28, 0xFF	; 255
  be:	d8 e0       	ldi	r29, 0x08	; 8
  c0:	de bf       	out	0x3e, r29	; 62
  c2:	cd bf       	out	0x3d, r28	; 61

000000c4 <__do_clear_bss>:
  c4:	21 e0       	ldi	r18, 0x01	; 1
  c6:	a0 e0       	ldi	r26, 0x00	; 0
  c8:	b1 e0       	ldi	r27, 0x01	; 1
  ca:	01 c0       	rjmp	.+2      	; 0xce <.do_clear_bss_start>

000000cc <.do_clear_bss_loop>:
  cc:	1d 92       	st	X+, r1

000000ce <.do_clear_bss_start>:
  ce:	a9 30       	cpi	r26, 0x09	; 9
  d0:	b2 07       	cpc	r27, r18
  d2:	e1 f7       	brne	.-8      	; 0xcc <.do_clear_bss_loop>
  d4:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  d8:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

000000dc <__bad_interrupt>:
  dc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000e0 <pinMode.constprop.0>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	fc 01       	movw	r30, r24
  e4:	ec 55       	subi	r30, 0x5C	; 92
  e6:	ff 4f       	sbci	r31, 0xFF	; 255
  e8:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
  ea:	80 57       	subi	r24, 0x70	; 112
  ec:	9f 4f       	sbci	r25, 0xFF	; 255
  ee:	fc 01       	movw	r30, r24
  f0:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
  f2:	88 23       	and	r24, r24
  f4:	99 f0       	breq	.+38     	; 0x11c <pinMode.constprop.0+0x3c>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	88 0f       	add	r24, r24
  fa:	99 1f       	adc	r25, r25
  fc:	fc 01       	movw	r30, r24
  fe:	ea 57       	subi	r30, 0x7A	; 122
 100:	ff 4f       	sbci	r31, 0xFF	; 255
 102:	a5 91       	lpm	r26, Z+
 104:	b4 91       	lpm	r27, Z
	out = portOutputRegister(port);
 106:	fc 01       	movw	r30, r24
 108:	e4 58       	subi	r30, 0x84	; 132
 10a:	ff 4f       	sbci	r31, 0xFF	; 255
 10c:	85 91       	lpm	r24, Z+
 10e:	94 91       	lpm	r25, Z
                cli();
		*reg &= ~bit;
		*out |= bit;
		SREG = oldSREG;
	} else {
		uint8_t oldSREG = SREG;
 110:	8f b7       	in	r24, 0x3f	; 63
                cli();
 112:	f8 94       	cli
		*reg |= bit;
 114:	ec 91       	ld	r30, X
 116:	e2 2b       	or	r30, r18
 118:	ec 93       	st	X, r30
		SREG = oldSREG;
 11a:	8f bf       	out	0x3f, r24	; 63
	}
}
 11c:	08 95       	ret

0000011e <digitalWrite>:
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
	uint8_t timer = digitalPinToTimer(pin);
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	fc 01       	movw	r30, r24
 122:	e8 59       	subi	r30, 0x98	; 152
 124:	ff 4f       	sbci	r31, 0xFF	; 255
 126:	24 91       	lpm	r18, Z
	uint8_t bit = digitalPinToBitMask(pin);
 128:	fc 01       	movw	r30, r24
 12a:	ec 55       	subi	r30, 0x5C	; 92
 12c:	ff 4f       	sbci	r31, 0xFF	; 255
 12e:	34 91       	lpm	r19, Z
	uint8_t port = digitalPinToPort(pin);
 130:	fc 01       	movw	r30, r24
 132:	e0 57       	subi	r30, 0x70	; 112
 134:	ff 4f       	sbci	r31, 0xFF	; 255
 136:	e4 91       	lpm	r30, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 138:	ee 23       	and	r30, r30
 13a:	c9 f0       	breq	.+50     	; 0x16e <digitalWrite+0x50>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 13c:	22 23       	and	r18, r18
 13e:	39 f0       	breq	.+14     	; 0x14e <digitalWrite+0x30>
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 140:	23 30       	cpi	r18, 0x03	; 3
 142:	01 f1       	breq	.+64     	; 0x184 <digitalWrite+0x66>
 144:	a8 f4       	brcc	.+42     	; 0x170 <digitalWrite+0x52>
 146:	21 30       	cpi	r18, 0x01	; 1
 148:	19 f1       	breq	.+70     	; 0x190 <digitalWrite+0x72>
 14a:	22 30       	cpi	r18, 0x02	; 2
 14c:	29 f1       	breq	.+74     	; 0x198 <digitalWrite+0x7a>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	ee 0f       	add	r30, r30
 152:	ff 1f       	adc	r31, r31
 154:	e4 58       	subi	r30, 0x84	; 132
 156:	ff 4f       	sbci	r31, 0xFF	; 255
 158:	a5 91       	lpm	r26, Z+
 15a:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
 15c:	8f b7       	in	r24, 0x3f	; 63
	cli();
 15e:	f8 94       	cli

	if (val == LOW) {
		*out &= ~bit;
 160:	ec 91       	ld	r30, X
	out = portOutputRegister(port);

	uint8_t oldSREG = SREG;
	cli();

	if (val == LOW) {
 162:	61 11       	cpse	r22, r1
 164:	26 c0       	rjmp	.+76     	; 0x1b2 <digitalWrite+0x94>
		*out &= ~bit;
 166:	30 95       	com	r19
 168:	3e 23       	and	r19, r30
	} else {
		*out |= bit;
 16a:	3c 93       	st	X, r19
	}

	SREG = oldSREG;
 16c:	8f bf       	out	0x3f, r24	; 63
}
 16e:	08 95       	ret
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
 170:	27 30       	cpi	r18, 0x07	; 7
 172:	a9 f0       	breq	.+42     	; 0x19e <digitalWrite+0x80>
 174:	28 30       	cpi	r18, 0x08	; 8
 176:	c9 f0       	breq	.+50     	; 0x1aa <digitalWrite+0x8c>
 178:	24 30       	cpi	r18, 0x04	; 4
 17a:	49 f7       	brne	.-46     	; 0x14e <digitalWrite+0x30>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 17c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 180:	8f 7d       	andi	r24, 0xDF	; 223
 182:	03 c0       	rjmp	.+6      	; 0x18a <digitalWrite+0x6c>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
 184:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 188:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
 18a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 18e:	df cf       	rjmp	.-66     	; 0x14e <digitalWrite+0x30>
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
 190:	84 b5       	in	r24, 0x24	; 36
 192:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
 194:	84 bd       	out	0x24, r24	; 36
 196:	db cf       	rjmp	.-74     	; 0x14e <digitalWrite+0x30>
 198:	84 b5       	in	r24, 0x24	; 36
 19a:	8f 7d       	andi	r24, 0xDF	; 223
 19c:	fb cf       	rjmp	.-10     	; 0x194 <digitalWrite+0x76>
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
 19e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1a2:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
 1a4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1a8:	d2 cf       	rjmp	.-92     	; 0x14e <digitalWrite+0x30>
 1aa:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 1ae:	8f 7d       	andi	r24, 0xDF	; 223
 1b0:	f9 cf       	rjmp	.-14     	; 0x1a4 <digitalWrite+0x86>
	cli();

	if (val == LOW) {
		*out &= ~bit;
	} else {
		*out |= bit;
 1b2:	3e 2b       	or	r19, r30
 1b4:	da cf       	rjmp	.-76     	; 0x16a <digitalWrite+0x4c>

000001b6 <micros>:
	return m;
}

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 1b6:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
 1b8:	f8 94       	cli
	m = timer0_overflow_count;
 1ba:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 1be:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 1c2:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 1c6:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
 1ca:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 1cc:	a8 9b       	sbis	0x15, 0	; 21
 1ce:	05 c0       	rjmp	.+10     	; 0x1da <micros+0x24>
 1d0:	2f 3f       	cpi	r18, 0xFF	; 255
 1d2:	19 f0       	breq	.+6      	; 0x1da <micros+0x24>
		m++;
 1d4:	01 96       	adiw	r24, 0x01	; 1
 1d6:	a1 1d       	adc	r26, r1
 1d8:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 1da:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1dc:	ba 2f       	mov	r27, r26
 1de:	a9 2f       	mov	r26, r25
 1e0:	98 2f       	mov	r25, r24
 1e2:	88 27       	eor	r24, r24
 1e4:	bc 01       	movw	r22, r24
 1e6:	cd 01       	movw	r24, r26
 1e8:	62 0f       	add	r22, r18
 1ea:	71 1d       	adc	r23, r1
 1ec:	81 1d       	adc	r24, r1
 1ee:	91 1d       	adc	r25, r1
 1f0:	42 e0       	ldi	r20, 0x02	; 2
 1f2:	66 0f       	add	r22, r22
 1f4:	77 1f       	adc	r23, r23
 1f6:	88 1f       	adc	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	4a 95       	dec	r20
 1fc:	d1 f7       	brne	.-12     	; 0x1f2 <micros+0x3c>
}
 1fe:	08 95       	ret

00000200 <delay>:

void delay(unsigned long ms)
{
 200:	8f 92       	push	r8
 202:	9f 92       	push	r9
 204:	af 92       	push	r10
 206:	bf 92       	push	r11
 208:	cf 92       	push	r12
 20a:	df 92       	push	r13
 20c:	ef 92       	push	r14
 20e:	ff 92       	push	r15
 210:	4b 01       	movw	r8, r22
 212:	5c 01       	movw	r10, r24
	uint32_t start = micros();
 214:	0e 94 db 00 	call	0x1b6	; 0x1b6 <micros>
 218:	6b 01       	movw	r12, r22
 21a:	7c 01       	movw	r14, r24

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 21c:	0e 94 db 00 	call	0x1b6	; 0x1b6 <micros>
 220:	6c 19       	sub	r22, r12
 222:	7d 09       	sbc	r23, r13
 224:	8e 09       	sbc	r24, r14
 226:	9f 09       	sbc	r25, r15
 228:	68 3e       	cpi	r22, 0xE8	; 232
 22a:	73 40       	sbci	r23, 0x03	; 3
 22c:	81 05       	cpc	r24, r1
 22e:	91 05       	cpc	r25, r1
 230:	a8 f3       	brcs	.-22     	; 0x21c <delay+0x1c>
			ms--;
 232:	21 e0       	ldi	r18, 0x01	; 1
 234:	82 1a       	sub	r8, r18
 236:	91 08       	sbc	r9, r1
 238:	a1 08       	sbc	r10, r1
 23a:	b1 08       	sbc	r11, r1
			start += 1000;
 23c:	88 ee       	ldi	r24, 0xE8	; 232
 23e:	c8 0e       	add	r12, r24
 240:	83 e0       	ldi	r24, 0x03	; 3
 242:	d8 1e       	adc	r13, r24
 244:	e1 1c       	adc	r14, r1
 246:	f1 1c       	adc	r15, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
 248:	81 14       	cp	r8, r1
 24a:	91 04       	cpc	r9, r1
 24c:	a1 04       	cpc	r10, r1
 24e:	b1 04       	cpc	r11, r1
 250:	29 f7       	brne	.-54     	; 0x21c <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
 252:	ff 90       	pop	r15
 254:	ef 90       	pop	r14
 256:	df 90       	pop	r13
 258:	cf 90       	pop	r12
 25a:	bf 90       	pop	r11
 25c:	af 90       	pop	r10
 25e:	9f 90       	pop	r9
 260:	8f 90       	pop	r8
 262:	08 95       	ret

00000264 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 264:	1f 92       	push	r1
 266:	0f 92       	push	r0
 268:	0f b6       	in	r0, 0x3f	; 63
 26a:	0f 92       	push	r0
 26c:	11 24       	eor	r1, r1
 26e:	2f 93       	push	r18
 270:	3f 93       	push	r19
 272:	8f 93       	push	r24
 274:	9f 93       	push	r25
 276:	af 93       	push	r26
 278:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
 27a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <timer0_millis>
 27e:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <timer0_millis+0x1>
 282:	a0 91 03 01 	lds	r26, 0x0103	; 0x800103 <timer0_millis+0x2>
 286:	b0 91 04 01 	lds	r27, 0x0104	; 0x800104 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
 28a:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <_edata>

	m += MILLIS_INC;
	f += FRACT_INC;
 28e:	23 e0       	ldi	r18, 0x03	; 3
 290:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
 292:	2d 37       	cpi	r18, 0x7D	; 125
 294:	58 f5       	brcc	.+86     	; 0x2ec <__vector_16+0x88>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
 296:	01 96       	adiw	r24, 0x01	; 1
 298:	a1 1d       	adc	r26, r1
 29a:	b1 1d       	adc	r27, r1
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
		m += 1;
	}

	timer0_fract = f;
 29c:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <_edata>
	timer0_millis = m;
 2a0:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <timer0_millis>
 2a4:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <timer0_millis+0x1>
 2a8:	a0 93 03 01 	sts	0x0103, r26	; 0x800103 <timer0_millis+0x2>
 2ac:	b0 93 04 01 	sts	0x0104, r27	; 0x800104 <timer0_millis+0x3>
	timer0_overflow_count++;
 2b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <timer0_overflow_count>
 2b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <timer0_overflow_count+0x1>
 2b8:	a0 91 07 01 	lds	r26, 0x0107	; 0x800107 <timer0_overflow_count+0x2>
 2bc:	b0 91 08 01 	lds	r27, 0x0108	; 0x800108 <timer0_overflow_count+0x3>
 2c0:	01 96       	adiw	r24, 0x01	; 1
 2c2:	a1 1d       	adc	r26, r1
 2c4:	b1 1d       	adc	r27, r1
 2c6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <timer0_overflow_count>
 2ca:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <timer0_overflow_count+0x1>
 2ce:	a0 93 07 01 	sts	0x0107, r26	; 0x800107 <timer0_overflow_count+0x2>
 2d2:	b0 93 08 01 	sts	0x0108, r27	; 0x800108 <timer0_overflow_count+0x3>
}
 2d6:	bf 91       	pop	r27
 2d8:	af 91       	pop	r26
 2da:	9f 91       	pop	r25
 2dc:	8f 91       	pop	r24
 2de:	3f 91       	pop	r19
 2e0:	2f 91       	pop	r18
 2e2:	0f 90       	pop	r0
 2e4:	0f be       	out	0x3f, r0	; 63
 2e6:	0f 90       	pop	r0
 2e8:	1f 90       	pop	r1
 2ea:	18 95       	reti
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
 2ec:	26 e8       	ldi	r18, 0x86	; 134
 2ee:	23 0f       	add	r18, r19
		m += 1;
 2f0:	02 96       	adiw	r24, 0x02	; 2
 2f2:	a1 1d       	adc	r26, r1
 2f4:	b1 1d       	adc	r27, r1
 2f6:	d2 cf       	rjmp	.-92     	; 0x29c <__vector_16+0x38>

000002f8 <main>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2f8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
 2fa:	84 b5       	in	r24, 0x24	; 36
 2fc:	82 60       	ori	r24, 0x02	; 2
 2fe:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
 300:	84 b5       	in	r24, 0x24	; 36
 302:	81 60       	ori	r24, 0x01	; 1
 304:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
 306:	85 b5       	in	r24, 0x25	; 37
 308:	82 60       	ori	r24, 0x02	; 2
 30a:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
 30c:	85 b5       	in	r24, 0x25	; 37
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
 312:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
 316:	81 60       	ori	r24, 0x01	; 1
 318:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
 31c:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 320:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 324:	82 60       	ori	r24, 0x02	; 2
 326:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
 32a:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
 334:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
 338:	81 60       	ori	r24, 0x01	; 1
 33a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
 33e:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
 342:	84 60       	ori	r24, 0x04	; 4
 344:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
 348:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
 34c:	81 60       	ori	r24, 0x01	; 1
 34e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
 352:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 356:	84 60       	ori	r24, 0x04	; 4
 358:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS1);
 35c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 360:	82 60       	ori	r24, 0x02	; 2
 362:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		sbi(ADCSRA, ADPS0);
 366:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 36a:	81 60       	ori	r24, 0x01	; 1
 36c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 370:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 374:	80 68       	ori	r24, 0x80	; 128
 376:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
 37a:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
void setup()
{
  pinMode(13, OUTPUT);
 37e:	8d e0       	ldi	r24, 0x0D	; 13
 380:	0e 94 70 00 	call	0xe0	; 0xe0 <pinMode.constprop.0>
  pinMode(12, OUTPUT);
 384:	8c e0       	ldi	r24, 0x0C	; 12
 386:	0e 94 70 00 	call	0xe0	; 0xe0 <pinMode.constprop.0>
  pinMode(11, OUTPUT);
 38a:	8b e0       	ldi	r24, 0x0B	; 11
 38c:	0e 94 70 00 	call	0xe0	; 0xe0 <pinMode.constprop.0>
	
	setup();
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
 390:	c0 e0       	ldi	r28, 0x00	; 0
 392:	d0 e0       	ldi	r29, 0x00	; 0
}

void loop()
{
  digitalWrite(13, HIGH);
 394:	61 e0       	ldi	r22, 0x01	; 1
 396:	8d e0       	ldi	r24, 0x0D	; 13
 398:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
  delay(3000); 
 39c:	68 eb       	ldi	r22, 0xB8	; 184
 39e:	7b e0       	ldi	r23, 0x0B	; 11
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 e0       	ldi	r25, 0x00	; 0
 3a4:	0e 94 00 01 	call	0x200	; 0x200 <delay>
  digitalWrite(13, LOW);
 3a8:	60 e0       	ldi	r22, 0x00	; 0
 3aa:	8d e0       	ldi	r24, 0x0D	; 13
 3ac:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
  
  digitalWrite(12, HIGH);
 3b0:	61 e0       	ldi	r22, 0x01	; 1
 3b2:	8c e0       	ldi	r24, 0x0C	; 12
 3b4:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
  delay(1000);
 3b8:	68 ee       	ldi	r22, 0xE8	; 232
 3ba:	73 e0       	ldi	r23, 0x03	; 3
 3bc:	80 e0       	ldi	r24, 0x00	; 0
 3be:	90 e0       	ldi	r25, 0x00	; 0
 3c0:	0e 94 00 01 	call	0x200	; 0x200 <delay>
  digitalWrite(12, LOW);
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	8c e0       	ldi	r24, 0x0C	; 12
 3c8:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
  
  digitalWrite(11, HIGH);
 3cc:	61 e0       	ldi	r22, 0x01	; 1
 3ce:	8b e0       	ldi	r24, 0x0B	; 11
 3d0:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
  delay(3000);
 3d4:	68 eb       	ldi	r22, 0xB8	; 184
 3d6:	7b e0       	ldi	r23, 0x0B	; 11
 3d8:	80 e0       	ldi	r24, 0x00	; 0
 3da:	90 e0       	ldi	r25, 0x00	; 0
 3dc:	0e 94 00 01 	call	0x200	; 0x200 <delay>
  digitalWrite(11, LOW);
 3e0:	60 e0       	ldi	r22, 0x00	; 0
 3e2:	8b e0       	ldi	r24, 0x0B	; 11
 3e4:	0e 94 8f 00 	call	0x11e	; 0x11e <digitalWrite>
 3e8:	20 97       	sbiw	r28, 0x00	; 0
 3ea:	a1 f2       	breq	.-88     	; 0x394 <main+0x9c>
 3ec:	0e 94 00 00 	call	0	; 0x0 <__vectors>
 3f0:	d1 cf       	rjmp	.-94     	; 0x394 <main+0x9c>

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
